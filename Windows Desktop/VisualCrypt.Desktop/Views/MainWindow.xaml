<controls:AppWindow x:Class="VisualCrypt.Desktop.Views.MainWindow"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d"
                    xmlns:views="clr-namespace:VisualCrypt.Desktop.Views"
                    xmlns:controls="clr-namespace:VisualCrypt.Desktop.Controls"
                    xmlns:commands="clr-namespace:VisualCrypt.Desktop.Commands"
                    xmlns:viewModels="clr-namespace:VisualCrypt.Applications.ViewModels;assembly=VisualCrypt.Applications"
                    Title="{Binding FileModel.Filename}"
                    Height="{Binding Source={x:Static controls:AppWindow.StartupHeight}}"
                    Width="{Binding Source={x:Static controls:AppWindow.StartupWidth}}"
                    WindowStartupLocation="CenterScreen"
                    AllowDrop="True"
                    MinHeight="150"
                    MinWidth="450"
                    BorderThickness="0"
                    WindowStyle="None"
                    ResizeMode="CanResizeWithGrip"
                    AllowsTransparency="True" d:DataContext="{d:DesignInstance viewModels:PortableMainViewModel}"
                    >
    <Window.InputBindings>
        <!-- File -->
        <KeyBinding Key="N" Modifiers="Control" Command="{Binding NewCommand}" />
        <KeyBinding Key="O" Modifiers="Control" Command="{Binding OpenCommand}" />
        <KeyBinding Key="S" Modifiers="Control" Command="{Binding SaveCommand}" />
        <KeyBinding Key="S" Modifiers="Control+Alt" Command="{Binding SaveAsCommand}" />
        <KeyBinding Key="F2" Command="{Binding ExportCommand}" />
        <KeyBinding Key="F2" Modifiers="Shift" Command="{Binding ImportWithEncodingCommand}" />
        <KeyBinding Key="P" Modifiers="Control+Alt" Command="commands:EditorCommands.Print" />
        <!-- VisualCrypt -->
        <KeyBinding Key="P" Modifiers="Control" Command="{Binding ShowSetPasswordDialogCommand}" />
        <KeyBinding Key="ESC" Command="{Binding ClearPasswordCommand}" />
        <KeyBinding Key="E" Modifiers="Control" Command="{Binding EncryptEditorContentsCommand}" />
        <KeyBinding Key="D" Modifiers="Control" Command="{Binding DecryptEditorContentsCommand}" />
        <KeyBinding Key="P" Modifiers="Control+Shift" Command="{Binding ShowSettingsDialogCommand}" />
        <!-- Edit -->
        <!-- see Editorxaml.cs -->
        <!-- Format -->
        <!-- see Editorxaml.cs -->
        <!-- View -->
        <!-- see Editorxaml.cs -->
        <!-- Help -->
        <KeyBinding Key="F1" Command="{Binding HelpCommand}" />
        <KeyBinding Key="F1" Modifiers="Shift" Command="{Binding AboutCommand}" />
        <KeyBinding Key="F9" Command="{Binding LogCommand}" />
    </Window.InputBindings>
    <Grid AllowDrop="True" Margin="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="AliceBlue">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <Menu Grid.Row="0" Height="27" Padding="0,4,0,0" IsMainMenu="True" KeyboardNavigation.TabNavigation="None">
            <MenuItem x:Name="miFile" Header="{Binding  ResourceWrapper.miFile, Mode=OneWay}"
                      IsTabStop="True">
                <MenuItem Header="{Binding  ResourceWrapper.miFileNew, Mode=OneWay}"
                          Command="{Binding NewCommand}" InputGestureText="Ctrl+N" />
                <MenuItem Header="{Binding  ResourceWrapper.miFileOpen, Mode=OneWay}"
                          Command="{Binding OpenCommand}" InputGestureText="Ctrl+O" />
                <MenuItem Header="{Binding  ResourceWrapper.miFileSave, Mode=OneWay}"
                          Command="{Binding SaveCommand}" InputGestureText="Ctrl+S" />
                <MenuItem Header="{Binding  ResourceWrapper.miFileSaveAs, Mode=OneWay}"
                          Command="{Binding SaveAsCommand}" InputGestureText="Control+Alt+S" />
                <Separator />
                <MenuItem
                    Header="{Binding  ResourceWrapper.miFileExportClearText, Mode=OneWay}"
                    Command="{Binding ExportCommand}" InputGestureText="F2" />
                <MenuItem
                    Header="{Binding  ResourceWrapper.miFileImportWithEnconding, Mode=OneWay}"
                    Command="{Binding ImportWithEncodingCommand}"
                    InputGestureText="Shift+F2" />
                <Separator />
                <MenuItem Header="{Binding  ResourceWrapper.miFilePrint, Mode=OneWay}"
                          Command="commands:EditorCommands.Print" InputGestureText="Ctrl+Alt+P" />
                <Separator />
                <MenuItem Header="{Binding  ResourceWrapper.miFileExit, Mode=OneWay}"
                          Command="{Binding ExitCommand}" InputGestureText="Alt+F4" />
            </MenuItem>
            <MenuItem Header="{Binding  ResourceWrapper.miVC, Mode=OneWay}">
                <MenuItem
                    Header="{Binding PasswordInfo.MenuPasswordText}"
                    Command="{Binding ShowSetPasswordDialogCommand}" InputGestureText="Ctrl+P" />
                <MenuItem
                    Header="{Binding ResourceWrapper.termClearPassword}"
                    Command="{Binding ClearPasswordCommand}" InputGestureText="ESC" />
                <MenuItem Header="{Binding  ResourceWrapper.miVCEncrypt, Mode=OneWay}"
                          Command="{Binding EncryptEditorContentsCommand}"
                          InputGestureText="Ctrl+E" />
                <MenuItem Header="{Binding  ResourceWrapper.miVCDecrypt, Mode=OneWay}"
                          Command="{Binding DecryptEditorContentsCommand}"
                          InputGestureText="Ctrl+D" />
                <Separator />
                <MenuItem Header="{Binding  ResourceWrapper.miVCSettings, Mode=OneWay}"
                          Command="{Binding ShowSettingsDialogCommand}"
                          InputGestureText="Ctrl+Shift+P" />
            </MenuItem>
            <MenuItem Header="{Binding  ResourceWrapper.miEdit, Mode=OneWay}">
                <MenuItem Header="{Binding  ResourceWrapper.miEditUndo, Mode=OneWay}"
                          Command="Undo" CommandTarget="{Binding ElementName=TextBox1}" />
                <MenuItem Header="{Binding  ResourceWrapper.miEditRedo, Mode=OneWay}"
                          Command="Redo" CommandTarget="{Binding ElementName=TextBox1}" />
                <Separator />
                <MenuItem Header="{Binding  ResourceWrapper.miEditCut, Mode=OneWay}"
                          Command="Cut" CommandTarget="{Binding ElementName=TextBox1}" />
                <MenuItem Header="{Binding  ResourceWrapper.miEditCopy, Mode=OneWay}"
                          Command="Copy" CommandTarget="{Binding ElementName=TextBox1}" />
                <MenuItem Header="{Binding  ResourceWrapper.miEditPaste, Mode=OneWay}"
                          Command="Paste" CommandTarget="{Binding ElementName=TextBox1}" />
                <Separator />
                <MenuItem Header="{Binding  ResourceWrapper.miEditFind, Mode=OneWay}"
                          Command="commands:EditorCommands.Find" InputGestureText="Ctrl+F" />
                <MenuItem Header="{Binding  ResourceWrapper.miEditFindNext, Mode=OneWay}"
                          Command="commands:EditorCommands.FindNext" InputGestureText="F3" />
                <MenuItem
                    Header="{Binding  ResourceWrapper.miEditFindPrevious, Mode=OneWay}"
                    Command="commands:EditorCommands.FindPrevious"
                    InputGestureText="Shift+F3" />
                <MenuItem Header="{Binding  ResourceWrapper.miEditReplace, Mode=OneWay}"
                          Command="commands:EditorCommands.Replace" InputGestureText="Ctrl+H" />
                <MenuItem Header="{Binding  ResourceWrapper.miEditDeleteLine, Mode=OneWay}"
                          Command="commands:EditorCommands.DeleteLine"
                          InputGestureText="Shift+Del" />
                <MenuItem Header="{Binding  ResourceWrapper.miEditGoTo, Mode=OneWay}"
                          Command="commands:EditorCommands.GoTo" InputGestureText="Ctrl+G" />
                <Separator />
                <MenuItem Header="{Binding  ResourceWrapper.miEditSelectAll, Mode=OneWay}"
                          Command="SelectAll" CommandTarget="{Binding ElementName=TextBox1}" />
                <MenuItem
                    Header="{Binding  ResourceWrapper.miEditInsertDateTime, Mode=OneWay}"
                    Command="commands:EditorCommands.InsertDate"
                    InputGestureText="F5, F5" />
            </MenuItem>
            <MenuItem Header="{Binding  ResourceWrapper.miFormat, Mode=OneWay}">
                <MenuItem Header="{Binding  ResourceWrapper.miFormatWordWrap, Mode=OneWay}"
                          IsCheckable="True"
                          IsChecked="{Binding SettingsManager.EditorSettings.IsWordWrapChecked, Mode=TwoWay}"
                          InputGestureText="Ctrl+W" />
                <MenuItem
                    Header="{Binding  ResourceWrapper.miFormatCheckSpelling, Mode=OneWay}"
                    IsCheckable="True"
                    IsChecked="{Binding SettingsManager.EditorSettings.IsSpellCheckingChecked, Mode=TwoWay}"
                    InputGestureText="Ctrl+L" />
                <MenuItem Header="{Binding  ResourceWrapper.miFormatFont, Mode=OneWay}"
                          Command="commands:EditorCommands.Font" InputGestureText="Ctrl+Alt+F" />
            </MenuItem>
            <MenuItem Header="{Binding  ResourceWrapper.miView, Mode=OneWay}">
                <MenuItem Header="{Binding  ResourceWrapper.miViewStatusBar, Mode=OneWay}"
                          IsCheckable="True"
                          IsChecked="{Binding SettingsManager.EditorSettings.IsStatusBarVisible, Mode=TwoWay}"
                          InputGestureText="F12" />
                <MenuItem Header="{Binding  ResourceWrapper.miViewToolArea, Mode=OneWay}"
                          IsCheckable="True"
                          IsChecked="{Binding SettingsManager.EditorSettings.IsToolAreaVisible, Mode=TwoWay}"
                          InputGestureText="ESC" />
                <MenuItem Header="{Binding  ResourceWrapper.miViewLanguage, Mode=OneWay}">
                    <MenuItem Header="English" Command="{Binding SwitchLanguageCommand}" CommandParameter="en"
                              IsChecked="{Binding ResourceWrapper.Info.IsEN, Mode=OneWay}" />
                    <MenuItem Header="Deutsch" Command="{Binding SwitchLanguageCommand}" CommandParameter="de"
                              IsChecked="{Binding ResourceWrapper.Info.IsDE, Mode=OneWay}" />
                    <MenuItem Header="Français" Command="{Binding SwitchLanguageCommand}" CommandParameter="fr"
                              IsChecked="{Binding ResourceWrapper.Info.IsFR, Mode=OneWay}" />
                    <MenuItem Header="Italiano" Command="{Binding SwitchLanguageCommand}" CommandParameter="it"
                              IsChecked="{Binding ResourceWrapper.Info.IsIT, Mode=OneWay}" />
                    <MenuItem Header="Русский" Command="{Binding SwitchLanguageCommand}" CommandParameter="ru"
                              IsChecked="{Binding ResourceWrapper.Info.IsRU, Mode=OneWay}" />
                </MenuItem>
                <MenuItem
                    Header="{Binding SettingsManager.EditorSettings.ZoomLevelMenuText}">
                    <MenuItem Header="{Binding  ResourceWrapper.miViewZoomIn, Mode=OneWay}"
                              InputGestureText="Ctrl +" Command="commands:EditorCommands.ZoomIn" />
                    <MenuItem
                        Header="{Binding  ResourceWrapper.miViewZoomOut, Mode=OneWay}"
                        InputGestureText="Ctrl -" Command="commands:EditorCommands.ZoomOut" />
                    <Separator />
                    <MenuItem Header="1_00%" InputGestureText="Ctrl+0" IsCheckable="false"
                              IsChecked="{Binding SettingsManager.EditorSettings.IsZoom100Checked, Mode=OneWay}"
                              Command="commands:EditorCommands.Zoom100" />
                </MenuItem>

            </MenuItem>

            <MenuItem Header="{Binding  ResourceWrapper.miHelp, Mode=OneWay}">
                <MenuItem Header="{Binding  ResourceWrapper.miHelpViewOnline, Mode=OneWay}"
                          Command="{Binding HelpCommand}" InputGestureText="F1" />
                <MenuItem Header="{Binding  ResourceWrapper.miHelpLog, Mode=OneWay}"
                          Command="{Binding LogCommand}" InputGestureText="F9" />
                <Separator />
                <MenuItem Header="{Binding  ResourceWrapper.miHelpAbout, Mode=OneWay}"
                          Command="{Binding AboutCommand}"
                          InputGestureText="Shift+F1" />
            </MenuItem>
        </Menu>
        <ContentControl x:Name="ContentEditorRegion" Grid.Row="1"
                        VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch"
                        VerticalAlignment="Stretch" HorizontalAlignment="Stretch" >
            <views:EditorUserControl />
        </ContentControl>
        <Border Grid.Row="2" Height="28" Background="{DynamicResource AccentColorBrush}"
                Visibility="{Binding SettingsManager.EditorSettings.IsStatusBarVisible, Converter={StaticResource BoolVisibility}}">
            <StackPanel>
                <views:PlainTextBar
                    Visibility="{Binding StatusBarModel.IsPlaintextBarVisible, Converter={StaticResource BoolVisibility}}" />
                <views:WorkingBar
                    Visibility="{Binding StatusBarModel.IsProgressBarVisible,Converter={StaticResource BoolVisibility}}" />
                <views:EncryptedBar
                    Visibility="{Binding  StatusBarModel.IsEncryptedBarVisible, Converter={StaticResource BoolVisibility}}" />
            </StackPanel>
        </Border>
    </Grid>
</controls:AppWindow>